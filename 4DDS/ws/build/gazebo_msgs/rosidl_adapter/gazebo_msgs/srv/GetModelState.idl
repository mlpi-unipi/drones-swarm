// generated from rosidl_adapter/resource/srv.idl.em
// with input from gazebo_msgs/srv/GetModelState.srv
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Pose.idl"
#include "geometry_msgs/msg/Twist.idl"
#include "std_msgs/msg/Header.idl"

module gazebo_msgs {
  module srv {
    @verbatim (language="comment", text=
      "Deprecated, kept for ROS 1 bridge." "\n"
      "Use GetEntityState")
    struct GetModelState_Request {
      @verbatim (language="comment", text=
        "name of Gazebo Model")
      string model_name;

      @verbatim (language="comment", text=
        "return pose and twist relative to this entity" "\n"
        "an entity can be a model, body, or geom" "\n"
        "be sure to use gazebo scoped naming notation (e.g.)" "\n"
        "leave empty or \"world\" will use inertial world frame")
      @unit (value="model_name::body_name")
      string relative_entity_name;
    };
    struct GetModelState_Response {
      @verbatim (language="comment", text=
        "Standard metadata for higher-level stamped data types." "\n"
        "* header.seq holds the number of requests since the plugin started" "\n"
        "* header.stamp timestamp related to the pose" "\n"
        "* header.frame_id not used but currently filled with the relative_entity_name")
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "pose of model in relative entity frame")
      geometry_msgs::msg::Pose pose;

      @verbatim (language="comment", text=
        "twist of model in relative entity frame")
      geometry_msgs::msg::Twist twist;

      @verbatim (language="comment", text=
        "return true if get successful")
      boolean success;

      @verbatim (language="comment", text=
        "comments if available")
      string status_message;
    };
  };
};
