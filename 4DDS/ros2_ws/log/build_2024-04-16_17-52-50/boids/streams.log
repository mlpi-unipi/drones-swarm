[0.007s] Invoking command in '/home/fourdds/ros2_ws/build/boids': CMAKE_PREFIX_PATH=/home/fourdds/ros2_ws/install/px4_msgs:/home/fourdds/ros2_ws/install/px4_ros_com:/home/fourdds/ros2_ws/install/boids:/opt/ros/humble LD_LIBRARY_PATH=/home/fourdds/ros2_ws/install/px4_msgs/lib:/home/fourdds/ros2_ws/install/px4_ros_com/lib:/home/fourdds/ros2_ws/install/boids/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib /usr/bin/cmake --build /home/fourdds/ros2_ws/build/boids -- -j24 -l24
[0.031s] [35m[1mConsolidate compiler generated dependencies of target uavs_spawner[0m
[0.035s] [ 11%] Built target boids__cpp
[0.035s] [  8%] Built target boids__rosidl_generator_c
[0.036s] [ 11%] Built target ament_cmake_python_copy_boids
[0.036s] [ 15%] Built target frame_transforms
[0.043s] [ 17%] [32mBuilding CXX object CMakeFiles/uavs_spawner.dir/src/uav_node.cpp.o[0m
[0.044s] [ 20%] [32mBuilding CXX object CMakeFiles/uavs_spawner.dir/src/swarm_master.cpp.o[0m
[0.045s] [ 22%] [32mBuilding CXX object CMakeFiles/uavs_spawner.dir/src/main.cpp.o[0m
[0.047s] [ 40%] Built target boids__rosidl_typesupport_cpp
[0.047s] [ 40%] Built target boids__rosidl_typesupport_introspection_c
[0.048s] [ 53%] Built target boids__rosidl_typesupport_c
[0.048s] [ 57%] Built target boids__rosidl_typesupport_fastrtps_c
[0.048s] [ 66%] Built target boids__rosidl_typesupport_introspection_cpp
[0.049s] [ 75%] Built target boids__rosidl_typesupport_fastrtps_cpp
[0.058s] [ 75%] Built target boids
[0.069s] [ 77%] Built target boids__py
[0.081s] [ 84%] Built target boids__rosidl_generator_py
[0.094s] [ 88%] Built target boids__rosidl_typesupport_introspection_c__pyext
[0.094s] [ 93%] Built target boids__rosidl_typesupport_fastrtps_c__pyext
[0.095s] [ 97%] Built target boids__rosidl_typesupport_c__pyext
[0.139s] running egg_info
[0.146s] writing boids.egg-info/PKG-INFO
[0.146s] writing dependency_links to boids.egg-info/dependency_links.txt
[0.147s] writing top-level names to boids.egg-info/top_level.txt
[0.165s] reading manifest file 'boids.egg-info/SOURCES.txt'
[0.166s] writing manifest file 'boids.egg-info/SOURCES.txt'
[0.181s] [ 97%] Built target ament_cmake_python_build_boids_egg
[1.838s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/logging.hpp:24[m[K,
[1.838s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:40[m[K,
[1.838s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[1.838s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[1.838s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[1.838s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[1.838s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[1.838s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[1.838s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[1.839s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[1.839s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[1.839s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[1.839s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[1.839s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:[m[K In member function â€˜[01m[Kvoid Swarm::UavNode::initialize()[m[Kâ€™:
[1.839s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:6:31:[m[K [01;35m[Kwarning: [m[Ktoo many arguments for format [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wformat-extra-args-Wformat-extra-args]8;;[m[K]
[1.839s]     6 |     RCLCPP_INFO(get_logger(), [01;35m[K"Woke up, init started"[m[K, vehicleId);
[1.839s]       |                               [01;35m[K^~~~~~~~~~~~~~~~~~~~~~~[m[K
[1.849s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:67:31:[m[K [01;35m[Kwarning: [m[Ktoo many arguments for format [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wformat-extra-args-Wformat-extra-args]8;;[m[K]
[1.849s]    67 |     RCLCPP_INFO(get_logger(), [01;35m[K"Waiting for command service"[m[K, vehicleNamespace);
[1.849s]       |                               [01;35m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.321s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[2.321s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[2.321s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.322s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[2.322s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[2.322s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>; MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.322s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.322s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.322s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.322s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.322s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:11:98:[m[K   required from here
[2.322s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>[m[Kâ€™})
[2.322s]   394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[2.322s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.322s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.322s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.323s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.323s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.323s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.323s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[2.323s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[2.323s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.323s]  1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
[2.323s]       |         [01;36m[K^~~~~~~~[m[K
[2.323s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.323s] /usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[2.323s] [01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>][m[Kâ€™
[2.323s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>; MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[2.323s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.323s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.323s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.323s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.323s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:11:98:[m[K   required from here
[2.323s] [01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[2.323s]  1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[2.323s]       |               [01;31m[K^~~~~~~~~~~~~~~[m[K
[2.323s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>; MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.323s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.324s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.324s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.324s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.324s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:11:98:[m[K   required from here
[2.324s] [01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.324s]  1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[2.324s]       |                [01;36m[K^~~~~~~~[m[K
[2.324s] [01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[2.324s]  1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[2.324s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[2.324s] [01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.324s]  1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[2.324s]       |                [01;36m[K^~~~~~~~[m[K
[2.324s] [01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleGlobalPosition_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[2.324s]  1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[2.324s]       |                          [01;36m[K^~~~~~~~~[m[K
[2.345s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[2.345s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[2.345s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.345s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.345s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.345s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.345s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.345s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.345s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.345s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.345s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[2.345s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[2.346s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>; MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.346s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.346s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.346s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.346s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.346s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:18:86:[m[K   required from here
[2.346s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>[m[Kâ€™})
[2.346s]   394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[2.346s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.346s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
[2.346s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[2.346s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.347s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.347s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.347s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.347s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.347s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.347s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.347s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.347s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[2.347s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[2.347s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.347s]  1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
[2.347s]       |         [01;36m[K^~~~~~~~[m[K
[2.348s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.348s] /usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[2.348s] [01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>][m[Kâ€™
[2.348s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>; MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[2.348s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.348s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.348s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.348s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.348s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:18:86:[m[K   required from here
[2.348s] [01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[2.348s]  1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[2.348s]       |               [01;31m[K^~~~~~~~~~~~~~~[m[K
[2.348s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>; MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.348s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.348s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.348s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.348s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleAttitude_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.349s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:18:86:[m[K   required from here
[2.349s] [01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.349s]  1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[2.349s]       |                [01;36m[K^~~~~~~~[m[K
[2.349s] [01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[2.349s]  1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[2.349s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[2.349s] [01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.349s]  1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[2.349s]       |                [01;36m[K^~~~~~~~[m[K
[2.349s] [01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleAttitude_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleAttitude_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[2.349s]  1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[2.349s]       |                          [01;36m[K^~~~~~~~~[m[K
[2.365s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[2.366s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[2.366s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.366s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.366s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.366s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.366s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.366s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.366s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.366s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.366s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[2.366s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[2.366s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>; MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.366s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.366s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.367s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.367s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.367s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:25:86:[m[K   required from here
[2.367s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>[m[Kâ€™})
[2.367s]   394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[2.367s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.367s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
[2.367s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[2.368s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.368s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.368s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.368s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.368s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.368s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.368s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.368s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.368s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[2.368s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[2.368s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.368s]  1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
[2.369s]       |         [01;36m[K^~~~~~~~[m[K
[2.369s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.369s] /usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[2.369s] [01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>][m[Kâ€™
[2.369s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>; MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[2.369s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.369s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.369s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.369s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.369s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:25:86:[m[K   required from here
[2.369s] [01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[2.369s]  1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[2.369s]       |               [01;31m[K^~~~~~~~~~~~~~~[m[K
[2.369s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>; MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.369s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.369s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.369s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.369s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = px4_msgs::msg::VehicleOdometry_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.369s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:25:86:[m[K   required from here
[2.369s] [01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.369s]  1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[2.369s]       |                [01;36m[K^~~~~~~~[m[K
[2.369s] [01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[2.369s]  1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[2.369s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[2.369s] [01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.369s]  1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[2.370s]       |                [01;36m[K^~~~~~~~[m[K
[2.370s] [01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&)>, std::function<void(const px4_msgs::msg::VehicleOdometry_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> >, std::default_delete<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<px4_msgs::msg::VehicleOdometry_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[2.370s]  1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[2.370s]       |                          [01;36m[K^~~~~~~~~[m[K
[2.385s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[2.385s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[2.385s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.386s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[2.386s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[2.386s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>; MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.386s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.386s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.386s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.386s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.386s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:32:73:[m[K   required from here
[2.386s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>[m[Kâ€™})
[2.386s]   394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[2.386s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.386s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.386s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.386s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[2.386s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[2.386s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.386s]  1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
[2.386s]       |         [01;36m[K^~~~~~~~[m[K
[2.386s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.386s] /usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[2.386s] [01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>][m[Kâ€™
[2.386s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>; MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[2.386s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.387s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.387s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.387s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.387s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:32:73:[m[K   required from here
[2.387s] [01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[2.387s]  1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[2.387s]       |               [01;31m[K^~~~~~~~~~~~~~~[m[K
[2.387s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>; MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.387s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.387s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = sensor_msgs::msg::LaserScan_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.387s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.387s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = sensor_msgs::msg::LaserScan_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<sensor_msgs::msg::LaserScan_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.387s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:32:73:[m[K   required from here
[2.387s] [01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.387s]  1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[2.387s]       |                [01;36m[K^~~~~~~~[m[K
[2.387s] [01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[2.387s]  1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[2.387s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[2.387s] [01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.387s]  1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[2.387s]       |                [01;36m[K^~~~~~~~[m[K
[2.387s] [01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&)>, std::function<void(const sensor_msgs::msg::LaserScan_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> >, std::default_delete<sensor_msgs::msg::LaserScan_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const sensor_msgs::msg::LaserScan_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<sensor_msgs::msg::LaserScan_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[2.387s]  1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[2.387s]       |                          [01;36m[K^~~~~~~~~[m[K
[2.402s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[2.402s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[2.402s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.402s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.402s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.402s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.402s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.402s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.402s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.403s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.403s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[2.403s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[2.403s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>; MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.403s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = boids::msg::NeighborsCOM_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.403s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = boids::msg::NeighborsCOM_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.403s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.403s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.403s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:39:86:[m[K   required from here
[2.403s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<boids::msg::NeighborsCOM_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>[m[Kâ€™})
[2.403s]   394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[2.404s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.404s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
[2.404s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[2.404s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[2.404s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[2.404s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[2.404s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[2.404s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[2.404s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[2.404s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[2.404s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[2.405s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.hpp:3[m[K,
[2.405s]                  from [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:1[m[K:
[2.405s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.405s]  1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
[2.405s]       |         [01;36m[K^~~~~~~~[m[K
[2.405s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[2.405s] /usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[2.405s] [01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>][m[Kâ€™
[2.405s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>; MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[2.406s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = boids::msg::NeighborsCOM_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.406s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = boids::msg::NeighborsCOM_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.406s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.406s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.406s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:39:86:[m[K   required from here
[2.406s] [01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
[2.406s]  1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[2.406s]       |               [01;31m[K^~~~~~~~~~~~~~~[m[K
[2.406s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>; MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[2.406s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = boids::msg::NeighborsCOM_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.406s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = boids::msg::NeighborsCOM_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.406s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.406s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = boids::msg::NeighborsCOM_<std::allocator<void> >; CallbackT = const std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>&; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<boids::msg::NeighborsCOM_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<boids::msg::NeighborsCOM_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[2.406s] [01m[K/home/fourdds/ros2_ws/src/boids/src/uav_node.cpp:39:86:[m[K   required from here
[2.406s] [01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.406s]  1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[2.406s]       |                [01;36m[K^~~~~~~~[m[K
[2.406s] [01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<boids::msg::NeighborsCOM_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
[2.406s]  1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[2.406s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[2.406s] [01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
[2.406s]  1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[2.406s]       |                [01;36m[K^~~~~~~~[m[K
[2.406s] [01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<boids::msg::NeighborsCOM_<std::allocator<void> >, std::_Bind<void (Swarm::UavNode::*(Swarm::UavNode*, std::_Placeholder<1>))(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void(std::weak_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&)>, std::function<void(const boids::msg::NeighborsCOM_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<boids::msg::NeighborsCOM_<std::allocator<void> >, std::default_delete<boids::msg::NeighborsCOM_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const boids::msg::NeighborsCOM_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<boids::msg::NeighborsCOM_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
[2.406s]  1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[2.406s]       |                          [01;36m[K^~~~~~~~~[m[K
[5.878s] gmake[2]: *** [CMakeFiles/uavs_spawner.dir/build.make:76: CMakeFiles/uavs_spawner.dir/src/uav_node.cpp.o] Error 1
[5.879s] gmake[1]: *** [CMakeFiles/Makefile2:620: CMakeFiles/uavs_spawner.dir/all] Error 2
[5.879s] gmake: *** [Makefile:146: all] Error 2
[5.881s] Invoked command in '/home/fourdds/ros2_ws/build/boids' returned '2': CMAKE_PREFIX_PATH=/home/fourdds/ros2_ws/install/px4_msgs:/home/fourdds/ros2_ws/install/px4_ros_com:/home/fourdds/ros2_ws/install/boids:/opt/ros/humble LD_LIBRARY_PATH=/home/fourdds/ros2_ws/install/px4_msgs/lib:/home/fourdds/ros2_ws/install/px4_ros_com/lib:/home/fourdds/ros2_ws/install/boids/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib /usr/bin/cmake --build /home/fourdds/ros2_ws/build/boids -- -j24 -l24
