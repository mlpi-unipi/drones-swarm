// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/DistanceSensor.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    typedef float float__4[4];
    module DistanceSensor_Constants {
      const uint8 MAV_DISTANCE_SENSOR_LASER = 0;
      const uint8 MAV_DISTANCE_SENSOR_ULTRASOUND = 1;
      const uint8 MAV_DISTANCE_SENSOR_INFRARED = 2;
      const uint8 MAV_DISTANCE_SENSOR_RADAR = 3;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_NONE")
      const uint8 ROTATION_YAW_0 = 0;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_YAW_45")
      const uint8 ROTATION_YAW_45 = 1;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_YAW_90")
      const uint8 ROTATION_YAW_90 = 2;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_YAW_135")
      const uint8 ROTATION_YAW_135 = 3;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_YAW_180")
      const uint8 ROTATION_YAW_180 = 4;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_YAW_225")
      const uint8 ROTATION_YAW_225 = 5;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_YAW_270")
      const uint8 ROTATION_YAW_270 = 6;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_YAW_315")
      const uint8 ROTATION_YAW_315 = 7;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_NONE")
      const uint8 ROTATION_FORWARD_FACING = 0;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_YAW_90")
      const uint8 ROTATION_RIGHT_FACING = 2;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_YAW_180")
      const uint8 ROTATION_BACKWARD_FACING = 4;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_YAW_270")
      const uint8 ROTATION_LEFT_FACING = 6;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_PITCH_90")
      const uint8 ROTATION_UPWARD_FACING = 24;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_PITCH_270")
      const uint8 ROTATION_DOWNWARD_FACING = 25;
      @verbatim (language="comment", text=
        "MAV_SENSOR_ROTATION_CUSTOM")
      const uint8 ROTATION_CUSTOM = 100;
    };
    @verbatim (language="comment", text=
      "DISTANCE_SENSOR message data")
    struct DistanceSensor {
      @verbatim (language="comment", text=
        "time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        "unique device ID for the sensor that does not change between power cycles")
      uint32 device_id;

      @verbatim (language="comment", text=
        "Minimum distance the sensor can measure (in m)")
      float min_distance;

      @verbatim (language="comment", text=
        "Maximum distance the sensor can measure (in m)")
      float max_distance;

      @verbatim (language="comment", text=
        "Current distance reading (in m)")
      float current_distance;

      @verbatim (language="comment", text=
        "Measurement variance (in m^2), 0 for unknown / invalid readings")
      float variance;

      @verbatim (language="comment", text=
        "Signal quality in percent (0...100%), where 0 = invalid signal, 100 = perfect signal, and -1 = unknown signal quality.")
      int8 signal_quality;

      @verbatim (language="comment", text=
        "Type from MAV_DISTANCE_SENSOR enum")
      uint8 type;

      @verbatim (language="comment", text=
        "Sensor horizontal field of view (rad)")
      float h_fov;

      @verbatim (language="comment", text=
        "Sensor vertical field of view (rad)")
      float v_fov;

      @verbatim (language="comment", text=
        "Quaterion sensor orientation with respect to the vehicle body frame to specify the orientation ROTATION_CUSTOM")
      float__4 q;

      @verbatim (language="comment", text=
        "Direction the sensor faces from MAV_SENSOR_ORIENTATION enum")
      uint8 orientation;
    };
  };
};
