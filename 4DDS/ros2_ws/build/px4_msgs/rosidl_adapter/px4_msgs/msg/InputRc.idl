// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/InputRc.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    typedef uint16 uint16__18[18];
    module InputRc_Constants {
      const uint8 RC_INPUT_SOURCE_UNKNOWN = 0;
      const uint8 RC_INPUT_SOURCE_PX4FMU_PPM = 1;
      const uint8 RC_INPUT_SOURCE_PX4IO_PPM = 2;
      const uint8 RC_INPUT_SOURCE_PX4IO_SPEKTRUM = 3;
      const uint8 RC_INPUT_SOURCE_PX4IO_SBUS = 4;
      const uint8 RC_INPUT_SOURCE_PX4IO_ST24 = 5;
      const uint8 RC_INPUT_SOURCE_MAVLINK = 6;
      const uint8 RC_INPUT_SOURCE_QURT = 7;
      const uint8 RC_INPUT_SOURCE_PX4FMU_SPEKTRUM = 8;
      const uint8 RC_INPUT_SOURCE_PX4FMU_SBUS = 9;
      const uint8 RC_INPUT_SOURCE_PX4FMU_ST24 = 10;
      const uint8 RC_INPUT_SOURCE_PX4FMU_SUMD = 11;
      const uint8 RC_INPUT_SOURCE_PX4FMU_DSM = 12;
      const uint8 RC_INPUT_SOURCE_PX4IO_SUMD = 13;
      const uint8 RC_INPUT_SOURCE_PX4FMU_CRSF = 14;
      const uint8 RC_INPUT_SOURCE_PX4FMU_GHST = 15;
      @verbatim (language="comment", text=
        "Maximum number of R/C input channels in the system. S.Bus has up to 18 channels.")
      const uint8 RC_INPUT_MAX_CHANNELS = 18;
      const int8 RSSI_MAX = 100;
    };
    struct InputRc {
      @verbatim (language="comment", text=
        "time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        "last valid reception time")
      uint64 timestamp_last_signal;

      @verbatim (language="comment", text=
        "number of channels actually being seen")
      uint8 channel_count;

      @verbatim (language="comment", text=
        "receive signal strength indicator (RSSI): < 0: Undefined, 0: no signal, 100: full reception")
      int32 rssi;

      @verbatim (language="comment", text=
        "explicit failsafe flag: true on TX failure or TX out of range , false otherwise. Only the true state is reliable, as there are some (PPM) receivers on the market going into failsafe without telling us explicitly.")
      boolean rc_failsafe;

      @verbatim (language="comment", text=
        "RC receiver connection status: True,if no frame has arrived in the expected time, false otherwise. True usually means that the receiver has been disconnected, but can also indicate a radio link loss on \"stupid\" systems. Will remain false, if a RX with failsafe option continues to transmit frames after a link loss.")
      boolean rc_lost;

      @verbatim (language="comment", text=
        "Number of lost RC frames. Note: intended purpose: observe the radio link quality if RSSI is not available. This value must not be used to trigger any failsafe-alike functionality.")
      uint16 rc_lost_frame_count;

      @verbatim (language="comment", text=
        "Number of total RC frames. Note: intended purpose: observe the radio link quality if RSSI is not available. This value must not be used to trigger any failsafe-alike functionality.")
      uint16 rc_total_frame_count;

      @verbatim (language="comment", text=
        "Length of a single PPM frame. Zero for non-PPM systems")
      uint16 rc_ppm_frame_length;

      @verbatim (language="comment", text=
        "Input source")
      uint8 input_source;

      @verbatim (language="comment", text=
        "measured pulse widths for each of the supported channels")
      uint16__18 values;

      @verbatim (language="comment", text=
        "link quality. Percentage 0-100%. -1 = invalid")
      int8 link_quality;

      @verbatim (language="comment", text=
        "Actual rssi in units of dBm. NaN = invalid")
      float rssi_dbm;
    };
  };
};
