// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/InternalCombustionEngineStatus.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    module InternalCombustionEngineStatus_Constants {
      @verbatim (language="comment", text=
        "The engine is not running. This is the default state.")
      const uint8 STATE_STOPPED = 0;
      @verbatim (language="comment", text=
        "The engine is starting. This is a transient state.")
      const uint8 STATE_STARTING = 1;
      @verbatim (language="comment", text=
        "The engine is running normally.")
      const uint8 STATE_RUNNING = 2;
      @verbatim (language="comment", text=
        "The engine can no longer function.")
      const uint8 STATE_FAULT = 3;
      @verbatim (language="comment", text=
        "General error.")
      const uint32 FLAG_GENERAL_ERROR = 1;
      @verbatim (language="comment", text=
        "Error of the crankshaft sensor. This flag is optional.")
      const uint32 FLAG_CRANKSHAFT_SENSOR_ERROR_SUPPORTED = 2;
      const uint32 FLAG_CRANKSHAFT_SENSOR_ERROR = 4;
      @verbatim (language="comment", text=
        "Temperature levels. These flags are optional")
      const uint32 FLAG_TEMPERATURE_SUPPORTED = 8;
      @verbatim (language="comment", text=
        "Under-temperature warning")
      const uint32 FLAG_TEMPERATURE_BELOW_NOMINAL = 16;
      @verbatim (language="comment", text=
        "Over-temperature warning")
      const uint32 FLAG_TEMPERATURE_ABOVE_NOMINAL = 32;
      @verbatim (language="comment", text=
        "Critical overheating")
      const uint32 FLAG_TEMPERATURE_OVERHEATING = 64;
      @verbatim (language="comment", text=
        "Exhaust gas over-temperature warning")
      const uint32 FLAG_TEMPERATURE_EGT_ABOVE_NOMINAL = 128;
      @verbatim (language="comment", text=
        "Fuel pressure. These flags are optional")
      const uint32 FLAG_FUEL_PRESSURE_SUPPORTED = 256;
      @verbatim (language="comment", text=
        "Under-pressure warning")
      const uint32 FLAG_FUEL_PRESSURE_BELOW_NOMINAL = 512;
      @verbatim (language="comment", text=
        "Over-pressure warning")
      const uint32 FLAG_FUEL_PRESSURE_ABOVE_NOMINAL = 1024;
      @verbatim (language="comment", text=
        "Detonation warning. This flag is optional.")
      const uint32 FLAG_DETONATION_SUPPORTED = 2048;
      @verbatim (language="comment", text=
        "Detonation condition observed warning")
      const uint32 FLAG_DETONATION_OBSERVED = 4096;
      @verbatim (language="comment", text=
        "Misfire warning. This flag is optional.")
      const uint32 FLAG_MISFIRE_SUPPORTED = 8192;
      @verbatim (language="comment", text=
        "Misfire condition observed warning")
      const uint32 FLAG_MISFIRE_OBSERVED = 16384;
      @verbatim (language="comment", text=
        "Oil pressure. These flags are optional")
      const uint32 FLAG_OIL_PRESSURE_SUPPORTED = 32768;
      @verbatim (language="comment", text=
        "Under-pressure warning")
      const uint32 FLAG_OIL_PRESSURE_BELOW_NOMINAL = 65536;
      @verbatim (language="comment", text=
        "Over-pressure warning")
      const uint32 FLAG_OIL_PRESSURE_ABOVE_NOMINAL = 131072;
      @verbatim (language="comment", text=
        "Debris warning. This flag is optional")
      const uint32 FLAG_DEBRIS_SUPPORTED = 262144;
      @verbatim (language="comment", text=
        "Detection of debris warning")
      const uint32 FLAG_DEBRIS_DETECTED = 524288;
      const uint8 SPARK_PLUG_SINGLE = 0;
      const uint8 SPARK_PLUG_FIRST_ACTIVE = 1;
      const uint8 SPARK_PLUG_SECOND_ACTIVE = 2;
      const uint8 SPARK_PLUG_BOTH_ACTIVE = 3;
    };
    struct InternalCombustionEngineStatus {
      @verbatim (language="comment", text=
        "time since system start (microseconds)")
      uint64 timestamp;

      uint8 state;

      uint32 flags;

      @verbatim (language="comment", text=
        "Engine load estimate, percent, [0, 127]")
      uint8 engine_load_percent;

      @verbatim (language="comment", text=
        "Engine speed, revolutions per minute")
      uint32 engine_speed_rpm;

      @verbatim (language="comment", text=
        "Spark dwell time, millisecond")
      float spark_dwell_time_ms;

      @verbatim (language="comment", text=
        "Atmospheric (barometric) pressure, kilopascal")
      float atmospheric_pressure_kpa;

      @verbatim (language="comment", text=
        "Engine intake manifold pressure, kilopascal")
      float intake_manifold_pressure_kpa;

      @verbatim (language="comment", text=
        "Engine intake manifold temperature, kelvin")
      float intake_manifold_temperature;

      @verbatim (language="comment", text=
        "Engine coolant temperature, kelvin")
      float coolant_temperature;

      @verbatim (language="comment", text=
        "Oil pressure, kilopascal")
      float oil_pressure;

      @verbatim (language="comment", text=
        "Oil temperature, kelvin")
      float oil_temperature;

      @verbatim (language="comment", text=
        "Fuel pressure, kilopascal")
      float fuel_pressure;

      @verbatim (language="comment", text=
        "Instant fuel consumption estimate, (centimeter^3)/minute")
      float fuel_consumption_rate_cm3pm;

      @verbatim (language="comment", text=
        "Estimate of the consumed fuel since the start of the engine, centimeter^3")
      float estimated_consumed_fuel_volume_cm3;

      @verbatim (language="comment", text=
        "Throttle position, percent")
      uint8 throttle_position_percent;

      @verbatim (language="comment", text=
        "The index of the publishing ECU")
      uint8 ecu_index;

      @verbatim (language="comment", text=
        "Spark plug activity report.")
      uint8 spark_plug_usage;

      @verbatim (language="comment", text=
        "Cylinder ignition timing, angular degrees of the crankshaft")
      float ignition_timing_deg;

      @verbatim (language="comment", text=
        "Fuel injection time, millisecond")
      float injection_time_ms;

      @verbatim (language="comment", text=
        "Cylinder head temperature (CHT), kelvin")
      float cylinder_head_temperature;

      @verbatim (language="comment", text=
        "Exhaust gas temperature (EGT), kelvin")
      float exhaust_gas_temperature;

      @verbatim (language="comment", text=
        "Estimated lambda coefficient, dimensionless ratio")
      float lambda_coefficient;
    };
  };
};
