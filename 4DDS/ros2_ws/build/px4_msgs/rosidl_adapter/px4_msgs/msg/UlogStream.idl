// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/UlogStream.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    typedef uint8 uint8__249[249];
    module UlogStream_Constants {
      @verbatim (language="comment", text=
        "flags bitmasks" "\n"        "if set, this message requires to be acked." "\n"        "Acked messages are published synchronous: a" "\n"        "publisher waits for an ack before sending the" "\n"        "next message")
      const uint8 FLAGS_NEED_ACK = 1;
      @verbatim (language="comment", text=
        "TODO: we might be able to reduce this if mavlink polled on the topic")
      const uint8 ORB_QUEUE_LENGTH = 16;
    };
    @verbatim (language="comment", text=
      "Message to stream ULog data from the logger. Corresponds to the LOGGING_DATA" "\n"
      "mavlink message")
    struct UlogStream {
      @verbatim (language="comment", text=
        "time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        "length of data")
      uint8 length;

      @verbatim (language="comment", text=
        "offset into data where first message starts. This" "\n"
        "can be used for recovery, when a previous message got lost")
      uint8 first_message_offset;

      @verbatim (language="comment", text=
        "allows determine drops")
      uint16 msg_sequence;

      @verbatim (language="comment", text=
        "see FLAGS_*")
      uint8 flags;

      @verbatim (language="comment", text=
        "ulog data")
      uint8__249 data;
    };
  };
};
