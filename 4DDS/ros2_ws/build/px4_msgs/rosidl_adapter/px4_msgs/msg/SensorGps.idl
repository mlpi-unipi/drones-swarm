// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/SensorGps.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    module SensorGps_Constants {
      const uint8 JAMMING_STATE_UNKNOWN = 0;
      const uint8 JAMMING_STATE_OK = 1;
      const uint8 JAMMING_STATE_WARNING = 2;
      const uint8 JAMMING_STATE_CRITICAL = 3;
      const uint8 SPOOFING_STATE_UNKNOWN = 0;
      const uint8 SPOOFING_STATE_NONE = 1;
      const uint8 SPOOFING_STATE_INDICATED = 2;
      const uint8 SPOOFING_STATE_MULTIPLE = 3;
      const uint8 RTCM_MSG_USED_UNKNOWN = 0;
      const uint8 RTCM_MSG_USED_NOT_USED = 1;
      const uint8 RTCM_MSG_USED_USED = 2;
    };
    @verbatim (language="comment", text=
      "GPS position in WGS84 coordinates." "\n"
      "the field 'timestamp' is for the position & velocity (microseconds)")
    struct SensorGps {
      @verbatim (language="comment", text=
        "time since system start (microseconds)")
      uint64 timestamp;

      uint64 timestamp_sample;

      @verbatim (language="comment", text=
        "unique device ID for the sensor that does not change between power cycles")
      uint32 device_id;

      @verbatim (language="comment", text=
        "Latitude in degrees, allows centimeter level RTK precision")
      double latitude_deg;

      @verbatim (language="comment", text=
        "Longitude in degrees, allows centimeter level RTK precision")
      double longitude_deg;

      @verbatim (language="comment", text=
        "Altitude above MSL, meters")
      double altitude_msl_m;

      @verbatim (language="comment", text=
        "Altitude above Ellipsoid, meters")
      double altitude_ellipsoid_m;

      @verbatim (language="comment", text=
        "GPS speed accuracy estimate, (metres/sec)")
      float s_variance_m_s;

      @verbatim (language="comment", text=
        "GPS course accuracy estimate, (radians)")
      float c_variance_rad;

      @verbatim (language="comment", text=
        "0-1: no fix, 2: 2D fix, 3: 3D fix, 4: RTCM code differential, 5: Real-Time Kinematic, float, 6: Real-Time Kinematic, fixed, 8: Extrapolated. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.")
      uint8 fix_type;

      @verbatim (language="comment", text=
        "GPS horizontal position accuracy (metres)")
      float eph;

      @verbatim (language="comment", text=
        "GPS vertical position accuracy (metres)")
      float epv;

      @verbatim (language="comment", text=
        "Horizontal dilution of precision")
      float hdop;

      @verbatim (language="comment", text=
        "Vertical dilution of precision")
      float vdop;

      @verbatim (language="comment", text=
        "GPS noise per millisecond")
      int32 noise_per_ms;

      @verbatim (language="comment", text=
        "Automatic gain control monitor")
      uint16 automatic_gain_control;

      @verbatim (language="comment", text=
        "indicates whether jamming has been detected or suspected by the receivers. O: Unknown, 1: OK, 2: Warning, 3: Critical")
      uint8 jamming_state;

      @verbatim (language="comment", text=
        "indicates jamming is occurring")
      int32 jamming_indicator;

      @verbatim (language="comment", text=
        "indicates whether spoofing has been detected or suspected by the receivers. O: Unknown, 1: OK, 2: Warning, 3: Critical")
      uint8 spoofing_state;

      @verbatim (language="comment", text=
        "GPS ground speed, (metres/sec)")
      float vel_m_s;

      @verbatim (language="comment", text=
        "GPS North velocity, (metres/sec)")
      float vel_n_m_s;

      @verbatim (language="comment", text=
        "GPS East velocity, (metres/sec)")
      float vel_e_m_s;

      @verbatim (language="comment", text=
        "GPS Down velocity, (metres/sec)")
      float vel_d_m_s;

      @verbatim (language="comment", text=
        "Course over ground (NOT heading, but direction of movement), -PI..PI, (radians)")
      float cog_rad;

      @verbatim (language="comment", text=
        "True if NED velocity is valid")
      boolean vel_ned_valid;

      @verbatim (language="comment", text=
        "timestamp + timestamp_time_relative = Time of the UTC timestamp since system start, (microseconds)")
      int32 timestamp_time_relative;

      @verbatim (language="comment", text=
        "Timestamp (microseconds, UTC), this is the timestamp which comes from the gps module. It might be unavailable right after cold start, indicated by a value of 0")
      uint64 time_utc_usec;

      @verbatim (language="comment", text=
        "Number of satellites used")
      uint8 satellites_used;

      @verbatim (language="comment", text=
        "heading angle of XYZ body frame rel to NED. Set to NaN if not available and updated (used for dual antenna GPS), (rad, [-PI, PI])")
      float heading;

      @verbatim (language="comment", text=
        "heading offset of dual antenna array in body frame. Set to NaN if not applicable. (rad, [-PI, PI])")
      float heading_offset;

      @verbatim (language="comment", text=
        "heading accuracy (rad, [0, 2PI])")
      float heading_accuracy;

      @verbatim (language="comment", text=
        "RTCM message injection rate Hz")
      float rtcm_injection_rate;

      @verbatim (language="comment", text=
        "uorb instance that is being used for RTCM corrections")
      uint8 selected_rtcm_instance;

      @verbatim (language="comment", text=
        "RTCM message CRC failure detected")
      boolean rtcm_crc_failed;

      @verbatim (language="comment", text=
        "Indicates if the RTCM message was used successfully by the receiver")
      uint8 rtcm_msg_used;
    };
  };
};
