// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/ArmingCheckReply.msg
// generated code does not contain a copyright notice

#include "px4_msgs/msg/Event.idl"

module px4_msgs {
  module msg {
    typedef px4_msgs::msg::Event px4_msgs__msg__Event;
    typedef px4_msgs__msg__Event px4_msgs__msg__Event__5[5];
    module ArmingCheckReply_Constants {
      const uint8 HEALTH_COMPONENT_INDEX_NONE = 0;
      const uint8 HEALTH_COMPONENT_INDEX_AVOIDANCE = 19;
      const uint8 ORB_QUEUE_LENGTH = 4;
    };
    struct ArmingCheckReply {
      @verbatim (language="comment", text=
        "time since system start (microseconds)")
      uint64 timestamp;

      uint8 request_id;

      uint8 registration_id;

      @verbatim (language="comment", text=
        "HEALTH_COMPONENT_INDEX_*")
      uint8 health_component_index;

      boolean health_component_is_present;

      boolean health_component_warning;

      boolean health_component_error;

      @verbatim (language="comment", text=
        "whether arming is possible, and if it's a navigation mode, if it can run")
      boolean can_arm_and_run;

      uint8 num_events;

      px4_msgs__msg__Event__5 events;

      @verbatim (language="comment", text=
        "Mode requirements")
      boolean mode_req_angular_velocity;

      boolean mode_req_attitude;

      boolean mode_req_local_alt;

      boolean mode_req_local_position;

      boolean mode_req_local_position_relaxed;

      boolean mode_req_global_position;

      boolean mode_req_mission;

      boolean mode_req_home_position;

      boolean mode_req_prevent_arming;

      boolean mode_req_manual_control;
    };
  };
};
