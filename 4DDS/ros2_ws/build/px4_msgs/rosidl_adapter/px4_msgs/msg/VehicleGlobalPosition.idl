// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/VehicleGlobalPosition.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    @verbatim (language="comment", text=
      "Fused global position in WGS84." "\n"
      "This struct contains global position estimation. It is not the raw GPS" "\n"
      "measurement (@see vehicle_gps_position). This topic is usually published by the position" "\n"
      "estimator, which will take more sources of information into account than just GPS," "\n"
      "e.g. control inputs of the vehicle in a Kalman-filter implementation.")
    struct VehicleGlobalPosition {
      @verbatim (language="comment", text=
        "time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        "the timestamp of the raw data (microseconds)")
      uint64 timestamp_sample;

      @verbatim (language="comment", text=
        "Latitude, (degrees)")
      double lat;

      @verbatim (language="comment", text=
        "Longitude, (degrees)")
      double lon;

      @verbatim (language="comment", text=
        "Altitude AMSL, (meters)")
      float alt;

      @verbatim (language="comment", text=
        "Altitude above ellipsoid, (meters)")
      float alt_ellipsoid;

      @verbatim (language="comment", text=
        "Reset delta for altitude")
      float delta_alt;

      @verbatim (language="comment", text=
        "Counter for reset events on horizontal position coordinates")
      uint8 lat_lon_reset_counter;

      @verbatim (language="comment", text=
        "Counter for reset events on altitude")
      uint8 alt_reset_counter;

      @verbatim (language="comment", text=
        "Standard deviation of horizontal position error, (metres)")
      float eph;

      @verbatim (language="comment", text=
        "Standard deviation of vertical position error, (metres)")
      float epv;

      @verbatim (language="comment", text=
        "Terrain altitude WGS84, (metres)")
      float terrain_alt;

      @verbatim (language="comment", text=
        "Terrain altitude estimate is valid")
      boolean terrain_alt_valid;

      @verbatim (language="comment", text=
        "True if this position is estimated through dead-reckoning")
      boolean dead_reckoning;
    };
  };
};
