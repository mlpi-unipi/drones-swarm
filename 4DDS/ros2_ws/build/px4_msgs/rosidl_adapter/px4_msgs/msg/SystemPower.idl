// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/SystemPower.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    typedef float float__4[4];
    module SystemPower_Constants {
      const uint8 BRICK1_VALID_SHIFTS = 0;
      const uint8 BRICK1_VALID_MASK = 1;
      const uint8 BRICK2_VALID_SHIFTS = 1;
      const uint8 BRICK2_VALID_MASK = 2;
      const uint8 BRICK3_VALID_SHIFTS = 2;
      const uint8 BRICK3_VALID_MASK = 4;
      const uint8 BRICK4_VALID_SHIFTS = 3;
      const uint8 BRICK4_VALID_MASK = 8;
    };
    struct SystemPower {
      @verbatim (language="comment", text=
        "time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        "peripheral 5V rail voltage")
      float voltage5v_v;

      @verbatim (language="comment", text=
        "Sensors 3V3 rail voltage")
      float__4 sensors3v3;

      @verbatim (language="comment", text=
        "Sensors 3V3 rail voltage was read (bitfield).")
      uint8 sensors3v3_valid;

      @verbatim (language="comment", text=
        "USB is connected when 1")
      uint8 usb_connected;

      @verbatim (language="comment", text=
        "brick bits power is good when bit 1")
      uint8 brick_valid;

      @verbatim (language="comment", text=
        "USB is valid when 1")
      uint8 usb_valid;

      @verbatim (language="comment", text=
        "servo power is good when 1")
      uint8 servo_valid;

      @verbatim (language="comment", text=
        "peripheral overcurrent when 1")
      uint8 periph_5v_oc;

      @verbatim (language="comment", text=
        "high power peripheral overcurrent when 1")
      uint8 hipower_5v_oc;

      @verbatim (language="comment", text=
        "5V to companion valid")
      uint8 comp_5v_valid;

      @verbatim (language="comment", text=
        "5V for CAN1/GPS1 valid")
      uint8 can1_gps1_5v_valid;
    };
  };
};
